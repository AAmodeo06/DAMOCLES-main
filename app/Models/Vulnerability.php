<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

/**
 * Model Vulnerability - Vulnerabilità di sicurezza
 * @author Luigi La Gioia
 */
class Vulnerability extends Model
{
    use HasFactory;

    protected $fillable = [
        'name',
        'description',
        'severity',
        'cve_id',
        'affected_systems',
        'patch_available',
        'exploitation_difficulty',
        'discovery_date',
    ];

    protected $casts = [
        'discovery_date' => 'datetime',
        'patch_available' => 'boolean',
        'affected_systems' => 'array',
    ];

    /**
     * Relazione con HumanFactor
     * @author Luigi La Gioia
     */
    public function humanFactors()
    {
        return $this->belongsToMany(HumanFactor::class, 'human_factor_vulnerability')
            ->withPivot('impact_level', 'notes')
            ->withTimestamps();
    }

    /**
     * Scope per vulnerabilità critiche
     * @author Luigi La Gioia
     */
    public function scopeCritical($query)
    {
        return $query->where('severity', 'critical');
    }

    /**
     * Scope per vulnerabilità senza patch
     * @author Luigi La Gioia
     */
    public function scopeUnpatched($query)
    {
        return $query->where('patch_available', false);
    }

    /**
     * Calcola il risk score della vulnerabilità
     * @author Luigi La Gioia
     */
    public function calculateRiskScore()
    {
        $severityScores = [
            'low' => 25,
            'medium' => 50,
            'high' => 75,
            'critical' => 100
        ];

        $baseScore = $severityScores[$this->severity] ?? 50;

        if (!$this->patch_available) {
            $baseScore *= 1.3;
        }

        $difficultyMultiplier = [
            'easy' => 1.2,
            'medium' => 1.0,
            'hard' => 0.8
        ];

        $baseScore *= ($difficultyMultiplier[$this->exploitation_difficulty] ?? 1.0);

        return min(100, round($baseScore));
    }
}
